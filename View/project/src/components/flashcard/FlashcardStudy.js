import React, { useState, useEffect } from 'react';
import { Play, RotateCw, Home, TrendingUp, Award, Calendar } from 'lucide-react';
import {getTodayStudyCards, rateFlashcard} from "../../api";

// ================================================
// MAIN FLASHCARD STUDY COMPONENT
// ================================================
const FlashcardStudy = () => {
    const [flashcards, setFlashcards] = useState([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isFlipped, setIsFlipped] = useState(false);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [currentSet, setCurrentSet] = useState(null);
    const [sessionStats, setSessionStats] = useState({
        studied: 0,
        correct: 0,
        total: 0
    });

    useEffect(() => {
        const urlParams = new URLSearchParams(window.location.search);
        const setName = urlParams.get('set');
        setCurrentSet(setName);
        fetchTodayCards(setName);
    }, []);

    // ‚úÖ FIXED: Use API function instead of direct fetch
    const fetchTodayCards = async (setName = null) => {
        try {
            setLoading(true);
            setError(null);

            console.log('=== FETCHING TODAY CARDS ===');
            console.log('Set name:', setName);

            // ‚úÖ Use the API function from api.js
            const data = await getTodayStudyCards();

            console.log('‚úÖ Flashcards received:', data);

            // ‚úÖ Filter by set if specified
            let filteredCards = data;
            if (setName) {
                filteredCards = data.filter(card =>
                    card.setName && card.setName.toLowerCase() === setName.toLowerCase()
                );
                console.log(`Filtered to ${filteredCards.length} cards for set "${setName}"`);
            }

            setFlashcards(filteredCards);
            setSessionStats(prev => ({ ...prev, total: filteredCards.length }));
            setLoading(false);

        } catch (error) {
            console.error('‚ùå Error fetching flashcards:', error);
            setError(error.message);
            setFlashcards([]);
            setSessionStats(prev => ({ ...prev, total: 0 }));
            setLoading(false);

            // ‚úÖ Check if it's an authentication error
            if (error.message.includes('401') || error.message.includes('authentication') || error.message.includes('Unauthorized')) {
                setError('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');

                // ‚úÖ Redirect to login after a delay
                setTimeout(() => {
                    localStorage.setItem('redirectAfterLogin', window.location.pathname);
                    window.location.href = '/login';
                }, 2000);
            }
        }
    };

    const playPronunciation = async (word) => {
        try {
            const response = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);
            const data = await response.json();

            if (data[0]?.phonetics) {
                const audioUrl = data[0].phonetics.find(p => p.audio)?.audio;
                if (audioUrl) {
                    const audio = new Audio(audioUrl);
                    audio.play();
                    return;
                }
            }
        } catch (error) {
            console.log('Dictionary API failed, using Speech Synthesis');
        }

        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(word);
            utterance.rate = 0.8;
            utterance.lang = 'en-US';
            speechSynthesis.speak(utterance);
        }
    };

    // ‚úÖ FIXED: Use API function instead of direct fetch
    const rateCard = async (rating) => {
        const currentCard = flashcards[currentIndex];

        // ‚úÖ Convert frontend rating to backend enum
        const convertRatingToEnum = (frontendRating) => {
            const ratingMap = {
                'EASY': 'EASY',
                'MEDIUM': 'MEDIUM',
                'HARD': 'HARD',
                'SKIP': 'AGAIN'
            };
            return ratingMap[frontendRating] || 'AGAIN';
        };

        const backendRating = convertRatingToEnum(rating);

        console.log('üöÄ RATING FLASHCARD:', {
            cardId: currentCard.id,
            cardWord: currentCard.word,
            frontendRating: rating,
            backendRating: backendRating,
            cardIdType: typeof currentCard.id
        });

        try {
            // ‚úÖ Use the API function from api.js which handles authentication automatically
            const responseData = await rateFlashcard(currentCard.id, backendRating);

            console.log('‚úÖ Rating saved successfully:', responseData);

            // ‚úÖ Show success notification
            showNotification(`‚úÖ ƒê√£ l∆∞u rating "${rating}" cho "${currentCard.word}"`, 'success');

            // ‚úÖ Update session stats after successful save
            setSessionStats(prev => ({
                ...prev,
                studied: prev.studied + 1,
                correct: ['EASY', 'MEDIUM'].includes(rating) ? prev.correct + 1 : prev.correct
            }));

            // ‚úÖ Move to next card
            nextCard();

        } catch (error) {
            console.error('‚ùå Error rating flashcard:', error);

            // ‚úÖ Handle different types of errors
            if (error.message.includes('401') || error.message.includes('authentication') || error.message.includes('Unauthorized')) {
                showNotification('‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. ƒêang chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p...', 'error');

                setTimeout(() => {
                    localStorage.setItem('redirectAfterLogin', window.location.pathname);
                    window.location.href = '/login';
                }, 2000);

            } else if (error.message.includes('403') || error.message.includes('Forbidden')) {
                showNotification('‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.', 'error');

            } else if (error.message.includes('network') || error.message.includes('fetch')) {
                showNotification('‚ùå L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.', 'error');

            } else {
                showNotification(`‚ùå L·ªói: ${error.message}`, 'error');
            }
        }
    };

    // ‚úÖ Helper function to show notifications
    const showNotification = (message, type = 'success') => {
        const notification = document.createElement('div');
        const bgColor = type === 'success' ? '#10b981' : '#ef4444';

        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 9999;
            background: ${bgColor}; color: white; padding: 12px 16px;
            border-radius: 8px; font-size: 14px; max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            word-wrap: break-word;
        `;
        notification.textContent = message;
        document.body.appendChild(notification);

        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, type === 'error' ? 4000 : 2000);
    };

    const nextCard = () => {
        if (currentIndex + 1 >= flashcards.length) {
            return;
        }
        setCurrentIndex(currentIndex + 1);
        setIsFlipped(false);
    };

    const retryFetch = () => {
        setLoading(true);
        setCurrentIndex(0);
        setIsFlipped(false);
        setSessionStats({ studied: 0, correct: 0, total: 0 });
        fetchTodayCards(currentSet);
    };

    // ‚úÖ Check authentication on mount
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (!token) {
            console.log('No token found, redirecting to login');
            localStorage.setItem('redirectAfterLogin', window.location.pathname);
            window.location.href = '/login';
            return;
        }

        // ‚úÖ Check if token is expired
        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const now = Math.floor(Date.now() / 1000);

            if (payload.exp <= now) {
                console.log('Token expired, redirecting to login');
                localStorage.removeItem('token');
                localStorage.setItem('redirectAfterLogin', window.location.pathname);
                window.location.href = '/login';
                return;
            }
        } catch (e) {
            console.error('Invalid token format, redirecting to login');
            localStorage.removeItem('token');
            localStorage.setItem('redirectAfterLogin', window.location.pathname);
            window.location.href = '/login';
            return;
        }
    }, []);

    if (loading) {
        return (
            <div className="flashcard-loading">
                <div className="loading-spinner"></div>
                <p>ƒêang t·∫£i th·∫ª h·ªçc {currentSet ? `cho "${currentSet}"` : 'h√¥m nay'}...</p>
            </div>
        );
    }

    if (flashcards.length === 0) {
        return (
            <div className="study-container">
                <div className="completion-screen">
                    <div className="completion-container">
                        <div className="completion-icon">üì≠</div>
                        <h2 className="completion-title">
                            {currentSet ?
                                `Kh√¥ng c√≥ th·∫ª n√†o trong "${currentSet}"` :
                                'Kh√¥ng c√≥ th·∫ª n√†o ƒë·ªÉ h·ªçc h√¥m nay'
                            }
                        </h2>
                        <p className="completion-subtitle">
                            {error ?
                                'Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server. Vui l√≤ng th·ª≠ l·∫°i sau.' :
                                currentSet ?
                                    'B·ªô th·∫ª n√†y c√≥ th·ªÉ ch∆∞a c√≥ t·ª´ v·ª±ng ho·∫∑c b·∫°n ƒë√£ h·ªçc h·∫øt.' :
                                    'B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ th·∫ª ho·∫∑c ch∆∞a c√≥ th·∫ª m·ªõi.'
                            }
                        </p>

                        {error && (
                            <div className="flashcard-error" style={{ marginBottom: '20px' }}>
                                <div className="flashcard-error-title">‚ö†Ô∏è L·ªói k·∫øt n·ªëi</div>
                                <p>Chi ti·∫øt: {error}</p>
                                <button
                                    onClick={retryFetch}
                                    className="empty-state-btn"
                                    style={{ marginTop: '10px' }}
                                >
                                    üîÑ Th·ª≠ l·∫°i
                                </button>
                            </div>
                        )}

                        <div className="completion-actions">
                            <button
                                onClick={() => window.location.href = '/flashcards'}
                                className="completion-btn primary"
                            >
                                üè† V·ªÅ trang ch·ªß Flashcards
                            </button>

                            {!currentSet && (
                                <button
                                    onClick={() => window.location.href = '/flashcards/create'}
                                    className="completion-btn secondary"
                                >
                                    ‚ûï T·∫°o th·∫ª m·ªõi
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    if (currentIndex >= flashcards.length) {
        return <CompletionScreen sessionStats={sessionStats} flashcards={flashcards} currentSet={currentSet} />;
    }

    const currentCard = flashcards[currentIndex];
    const progress = ((currentIndex + 1) / flashcards.length) * 100;

    return (
        <div className="study-container">
            {/* Set info header */}
            {currentSet && (
                <div className="set-info-header">
                    <div className="set-info-content">
                        <h2 className="set-info-title">üìö {currentSet}</h2>
                    </div>
                </div>
            )}

            {/* Error display */}
            {error && (
                <div className="flashcard-error" style={{ marginBottom: '20px' }}>
                    <div className="flashcard-error-title">‚ö†Ô∏è Th√¥ng b√°o</div>
                    <p>{error}</p>
                    <button
                        onClick={retryFetch}
                        className="retry-btn"
                        style={{ marginLeft: '10px' }}
                    >
                        üîÑ Th·ª≠ l·∫°i
                    </button>
                </div>
            )}

            {/* Flashcard */}
            <div className="flashcard">
                <div className="flashcard-content">
                    {/* New Word Badge */}
                    <div className="word-badge">
                        {currentSet ? `${currentSet}` : 'T·ª´ m·ªõi'}
                    </div>

                    {!isFlipped ? (
                        // FRONT SIDE - Hi·ªÉn th·ªã T·ª™ V·ª∞NG (m·∫∑t tr∆∞·ªõc)
                        <div className="flashcard-front">
                            <h1 className="word-display">
                                {currentCard.word}
                            </h1>

                            {currentCard.pronunciation && (
                                <div className="pronunciation-container">
                                    <button
                                        onClick={() => playPronunciation(currentCard.word)}
                                        className="pronunciation-btn"
                                        title="Ph√°t √¢m"
                                    >
                                        <Play className="w-4 h-4" />
                                        <span className="pronunciation-text">{currentCard.pronunciation}</span>
                                    </button>
                                    {currentCard.wordType && (
                                        <span className="word-type">
                                            ({currentCard.wordType})
                                        </span>
                                    )}
                                </div>
                            )}

                            <button
                                onClick={() => setIsFlipped(true)}
                                className="flip-btn"
                                title="L·∫≠t th·∫ª ƒë·ªÉ xem nghƒ©a"
                            >
                                <RotateCw className="w-6 h-6" />
                                <span>Xem nghƒ©a</span>
                            </button>
                        </div>
                    ) : (
                        // BACK SIDE - Hi·ªÉn th·ªã ƒê·ªäNH NGHƒ®A (m·∫∑t sau)
                        <div className="flashcard-back">
                            <div className="definition-section">
                                <h3 className="section-title">ƒê·ªãnh nghƒ©a:</h3>
                                <p className="definition-text">{currentCard.meaning}</p>
                            </div>

                            {currentCard.exampleSentence && (
                                <div className="definition-section">
                                    <h3 className="section-title">V√≠ d·ª•:</h3>
                                    <ul className="example-list">
                                        <li className="example-item">"{currentCard.exampleSentence}"</li>
                                    </ul>
                                </div>
                            )}

                            {currentCard.synonyms && (
                                <div className="definition-section">
                                    <h3 className="section-title">T·ª´ ƒë·ªìng nghƒ©a:</h3>
                                    <p className="synonyms-text">{currentCard.synonyms}</p>
                                </div>
                            )}

                            {currentCard.imageUrl && (
                                <div className="definition-section">
                                    <img
                                        src={currentCard.imageUrl}
                                        alt="Illustration"
                                        className="flashcard-image"
                                    />
                                </div>
                            )}

                            <button
                                onClick={() => setIsFlipped(false)}
                                className="flip-btn"
                                title="L·∫≠t l·∫°i ƒë·ªÉ xem t·ª´"
                            >
                                <RotateCw className="w-6 h-6" />
                                <span>Xem t·ª´</span>
                            </button>
                        </div>
                    )}
                </div>
            </div>

            {/* Rating Buttons */}
            <div className="rating-section">
                <h3 className="rating-title">ƒê√°nh gi√° m·ª©c ƒë·ªô hi·ªÉu c·ªßa b·∫°n:</h3>
                <div className="rating-grid">
                    <button
                        onClick={() => rateCard('EASY')}
                        className="rating-btn easy"
                        title="T·ª´ n√†y r·∫•t d·ªÖ hi·ªÉu"
                    >
                        <div className="rating-emoji">üòä</div>
                        <div className="rating-label">D·ªÖ</div>
                        <div className="rating-description">Hi·ªÉu ngay</div>
                    </button>

                    <button
                        onClick={() => rateCard('MEDIUM')}
                        className="rating-btn medium"
                        title="T·ª´ n√†y c·∫ßn suy nghƒ© m·ªôt ch√∫t"
                    >
                        <div className="rating-emoji">üòê</div>
                        <div className="rating-label">Trung b√¨nh</div>
                        <div className="rating-description">C·∫ßn suy nghƒ©</div>
                    </button>

                    <button
                        onClick={() => rateCard('HARD')}
                        className="rating-btn hard"
                        title="T·ª´ n√†y kh√≥ hi·ªÉu, c·∫ßn h·ªçc l·∫°i"
                    >
                        <div className="rating-emoji">üòñ</div>
                        <div className="rating-label">Kh√≥</div>
                        <div className="rating-description">H·ªçc l·∫°i s·ªõm</div>
                    </button>

                    <button
                        onClick={() => rateCard('SKIP')}
                        className="rating-btn skip"
                        title="C·∫ßn xem l·∫°i ngay"
                    >
                        <div className="rating-emoji">üîÑ</div>
                        <div className="rating-label">L·∫°i</div>
                        <div className="rating-description">Xem l·∫°i ngay</div>
                    </button>
                </div>
            </div>

            {/* Study Tip */}
            <div className="study-tip">
                üí° <strong>M·∫πo h·ªçc hi·ªáu qu·∫£:</strong> H√£y ƒë·ªçc to t·ª´ v·ª±ng v√† t·∫°o c√¢u v√≠ d·ª• c·ªßa ri√™ng b·∫°n ƒë·ªÉ ghi nh·ªõ t·ªët h∆°n.
            </div>

            {/* Quick Navigation */}
            <div className="quick-nav">
                <button
                    onClick={() => window.location.href = '/flashcards'}
                    className="nav-btn"
                    title="V·ªÅ trang ch·ªß"
                >
                    <Home className="w-4 h-4" />
                </button>
                <button
                    onClick={() => window.location.href = '/flashcards/statistics'}
                    className="nav-btn"
                    title="Xem th·ªëng k√™"
                >
                    <TrendingUp className="w-4 h-4" />
                </button>
            </div>
        </div>
    );
};

// ================================================
// COMPLETION SCREEN COMPONENT (unchanged)
// ================================================
const CompletionScreen = ({ sessionStats, flashcards, currentSet }) => {
    const accuracy = sessionStats.total > 0 ?
        Math.round((sessionStats.correct / sessionStats.total) * 100) : 0;

    const studyTimeMinutes = Math.max(1, Math.floor(sessionStats.studied * 1.5));

    return (
        <div className="completion-screen">
            <div className="completion-container">
                <div className="completion-icon">üéâ</div>
                <h2 className="completion-title">
                    Xu·∫•t s·∫Øc!
                </h2>
                <p className="completion-subtitle">
                    {currentSet ?
                        `B·∫°n ƒë√£ ho√†n th√†nh b·ªô "${currentSet}"` :
                        'B·∫°n ƒë√£ ho√†n th√†nh session h·ªçc h√¥m nay'
                    }
                </p>

                {/* Session Statistics */}
                <div className="completion-stats">
                    <div className="completion-stat">
                        <div className="completion-stat-number blue">
                            {sessionStats.studied}
                        </div>
                        <div className="completion-stat-label">Th·∫ª ƒë√£ h·ªçc</div>
                    </div>
                    <div className="completion-stat">
                        <div className="completion-stat-number green">
                            {accuracy}%
                        </div>
                        <div className="completion-stat-label">ƒê·ªô ch√≠nh x√°c</div>
                    </div>
                    <div className="completion-stat">
                        <div className="completion-stat-number purple">
                            {studyTimeMinutes}
                        </div>
                        <div className="completion-stat-label">Ph√∫t h·ªçc</div>
                    </div>
                    <div className="completion-stat">
                        <div className="completion-stat-number orange">
                            {flashcards ? flashcards.length : 0}
                        </div>
                        <div className="completion-stat-label">T·ªïng t·ª´</div>
                    </div>
                </div>

                {/* Achievement Badges */}
                <div className="achievement-section">
                    <h4 className="achievement-title">üèÜ Th√†nh t√≠ch h√¥m nay:</h4>
                    <div className="achievement-badges">
                        {accuracy >= 90 && (
                            <div className="achievement-badge gold">
                                ü•á Ch√≠nh x√°c cao
                                <span className="badge-desc">‚â•90% ƒë√∫ng</span>
                            </div>
                        )}
                        {sessionStats.studied >= 10 && (
                            <div className="achievement-badge silver">
                                üìö H·ªçc chƒÉm ch·ªâ
                                <span className="badge-desc">‚â•10 th·∫ª</span>
                            </div>
                        )}
                        {sessionStats.studied >= sessionStats.total && sessionStats.total > 0 && (
                            <div className="achievement-badge bronze">
                                ‚úÖ Ho√†n th√†nh m·ª•c ti√™u
                                <span className="badge-desc">100% ho√†n th√†nh</span>
                            </div>
                        )}
                        {studyTimeMinutes >= 15 && (
                            <div className="achievement-badge diamond">
                                ‚è∞ Ki√™n tr√¨ h·ªçc t·∫≠p
                                <span className="badge-desc">‚â•15 ph√∫t</span>
                            </div>
                        )}
                    </div>
                </div>

                {/* Action Buttons */}
                <div className="completion-actions">
                    <button
                        onClick={() => window.location.href = '/flashcards'}
                        className="completion-btn primary"
                    >
                        üè† V·ªÅ trang ch·ªß
                    </button>
                    <button
                        onClick={() => window.location.href = '/flashcards/statistics'}
                        className="completion-btn secondary"
                    >
                        üìä Xem th·ªëng k√™ chi ti·∫øt
                    </button>
                    <button
                        onClick={() => window.location.reload()}
                        className="completion-btn tertiary"
                    >
                        üîÑ H·ªçc th√™m
                    </button>
                </div>

                {/* Next Study Reminder */}
                <div className="next-study-reminder">
                    <div className="reminder-content">
                        <h5 className="reminder-title">üí° L·ªùi khuy√™n h·ªçc t·∫≠p:</h5>
                        <ul className="reminder-list">
                            <li>üóìÔ∏è H√£y quay l·∫°i v√†o c√πng gi·ªù ng√†y mai ƒë·ªÉ duy tr√¨ th√≥i quen</li>
                            <li>üîî Th·∫ª √¥n t·∫≠p s·∫Ω xu·∫•t hi·ªán d·ª±a tr√™n ƒë∆∞·ªùng cong qu√™n l√£ng</li>
                            <li>üìà H·ªçc ƒë·ªÅu ƒë·∫∑n 15-20 ph√∫t/ng√†y hi·ªáu qu·∫£ h∆°n h·ªçc d·ªìn</li>
                            <li>üéØ T·∫≠p trung v√†o nh·ªØng t·ª´ ƒë∆∞·ª£c ƒë√°nh gi√° "Kh√≥" ƒë·ªÉ c·∫£i thi·ªán</li>
                        </ul>
                    </div>
                </div>

                {/* Progress Motivation */}
                <div className="progress-motivation">
                    <p className="motivation-text">
                        üåü <strong>Tuy·ªát v·ªùi!</strong> B·∫°n ƒëang tr√™n ƒë∆∞·ªùng chinh ph·ª•c {sessionStats.studied} t·ª´ v·ª±ng m·ªõi{currentSet ? ` t·ª´ "${currentSet}"` : ''}.
                        H√£y ti·∫øp t·ª•c duy tr√¨ v√† b·∫°n s·∫Ω th·∫•y s·ª± ti·∫øn b·ªô r√µ r·ªát!
                    </p>
                </div>
            </div>
        </div>
    );
};

export default FlashcardStudy;