import React, { useState, useEffect } from 'react';
import './SpeakingWritingResultModal.css';

const SpeakingWritingResultModal = ({ isOpen, onClose, attemptId, testType }) => {
    const [resultData, setResultData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [audioPlaying, setAudioPlaying] = useState({});

    // Load result data when modal opens
    useEffect(() => {
        if (isOpen && attemptId) {
            loadResultData();
        }

        // Cleanup function
        return () => {
            // Stop all playing audio when component unmounts
            Object.values(audioPlaying).forEach(audio => {
                if (audio && typeof audio.pause === 'function') {
                    audio.pause();
                    audio.currentTime = 0;
                }
            });
        };
    }, [isOpen, attemptId]);

    const loadResultData = async () => {
        try {
            setLoading(true);
            setError('');

            console.log('üîç Loading Speaking/Writing result for attempt:', attemptId);

            const token = localStorage.getItem('token') || sessionStorage.getItem('token');
            const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:8080/api'}/test-attempts/${attemptId}/detailed-result`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Failed to load result: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log('‚úÖ Result data loaded:', data);

            setResultData(data);

        } catch (error) {
            console.error('‚ùå Error loading result data:', error);
            setError(error.message);
        } finally {
            setLoading(false);
        }
    };

    // Determine if this is speaking or writing test
    const isSpeakingTest = () => {
        return resultData?.testType === 'SPEAKING' ||
            testType?.toUpperCase().includes('SPEAKING');
    };

    // Get criteria for the test type
    const getCriteria = () => {
        if (isSpeakingTest()) {
            return [
                { id: 'fluency', name: 'Fluency and Coherence', description: 'Kh·∫£ nƒÉng n√≥i tr√¥i ch·∫£y v√† m·∫°ch l·∫°c' },
                { id: 'lexical', name: 'Lexical Resource', description: 'V·ªën t·ª´ v·ª±ng phong ph√∫' },
                { id: 'grammar', name: 'Grammatical Range and Accuracy', description: 'Ng·ªØ ph√°p ƒëa d·∫°ng v√† ch√≠nh x√°c' },
                { id: 'pronunciation', name: 'Pronunciation', description: 'Ph√°t √¢m r√µ r√†ng' }
            ];
        } else {
            return [
                { id: 'task_achievement', name: 'Task Achievement', description: 'Ho√†n th√†nh nhi·ªám v·ª•' },
                { id: 'coherence', name: 'Coherence and Cohesion', description: 'T√≠nh m·∫°ch l·∫°c v√† li√™n k·∫øt' },
                { id: 'lexical', name: 'Lexical Resource', description: 'V·ªën t·ª´ v·ª±ng phong ph√∫' },
                { id: 'grammar', name: 'Grammatical Range and Accuracy', description: 'Ng·ªØ ph√°p ƒëa d·∫°ng v√† ch√≠nh x√°c' }
            ];
        }
    };

    // Play audio function
    const playAudio = async (responseId, audioBase64) => {
        try {
            // Stop any currently playing audio
            Object.keys(audioPlaying).forEach(id => {
                if (audioPlaying[id] && id !== responseId && typeof audioPlaying[id].pause === 'function') {
                    audioPlaying[id].pause();
                    audioPlaying[id].currentTime = 0;
                }
            });

            setAudioPlaying(prev => ({ ...prev, [responseId]: 'loading' }));

            const audioSrc = audioBase64.startsWith('data:')
                ? audioBase64
                : `data:audio/webm;base64,${audioBase64}`;

            const audio = new Audio();
            audio.preload = 'metadata';
            audio.crossOrigin = 'anonymous';

            audio.oncanplaythrough = () => {
                console.log('‚úÖ Audio ready to play for response:', responseId);
                setAudioPlaying(prev => ({ ...prev, [responseId]: audio }));
                audio.play().catch(err => {
                    console.error('Play failed:', err);
                    setAudioPlaying(prev => ({ ...prev, [responseId]: null }));
                });
            };

            audio.onended = () => {
                console.log('üîö Audio ended for response:', responseId);
                setAudioPlaying(prev => ({ ...prev, [responseId]: null }));
            };

            audio.onerror = (e) => {
                console.error('‚ùå Audio error for response:', responseId, e);
                setAudioPlaying(prev => ({ ...prev, [responseId]: null }));
                alert('Kh√¥ng th·ªÉ ph√°t audio');
            };

            audio.src = audioSrc;

        } catch (error) {
            console.error('‚ùå Error setting up audio player:', error);
            setAudioPlaying(prev => ({ ...prev, [responseId]: null }));
            alert('L·ªói kh·ªüi t·∫°o audio player: ' + error.message);
        }
    };

    const stopAudio = (responseId) => {
        const audio = audioPlaying[responseId];
        if (audio && typeof audio.pause === 'function') {
            audio.pause();
            audio.currentTime = 0;
            setAudioPlaying(prev => ({ ...prev, [responseId]: null }));
        }
    };

    // Get score color
    const getScoreColor = (score) => {
        if (score >= 7) return '#4CAF50'; // Green
        if (score >= 5) return '#FF9800'; // Orange
        return '#F44336'; // Red
    };

    // Format score for display
    const formatScore = (score) => {
        if (score === null || score === undefined) return 'Ch∆∞a c√≥ ƒëi·ªÉm';
        return parseFloat(score).toFixed(1);
    };

    // Get performance badge
    const getPerformanceBadge = (level) => {
        const badges = {
            'Excellent': { icon: 'üåü', color: '#4CAF50' },
            'Good': { icon: 'üëç', color: '#FF9800' },
            'Satisfactory': { icon: 'üìà', color: '#2196F3' },
            'Needs Improvement': { icon: 'üìö', color: '#F44336' },
            'Pending': { icon: '‚è≥', color: '#9E9E9E' }
        };
        return badges[level] || badges['Pending'];
    };

    // Safe check for response methods
    const hasAudioResponse = (response) => {
        return response.audioBase64 || (response.hasAudioResponse && typeof response.hasAudioResponse === 'function' && response.hasAudioResponse());
    };

    const hasTextResponse = (response) => {
        return response.responseText || (response.hasTextResponse && typeof response.hasTextResponse === 'function' && response.hasTextResponse());
    };

    const getWordCount = (response) => {
        if (response.getWordCount && typeof response.getWordCount === 'function') {
            return response.getWordCount();
        }
        return response.responseText ? response.responseText.split(/\s+/).filter(word => word.length > 0).length : 0;
    };

    const getFormattedDuration = (response) => {
        if (response.getFormattedDuration && typeof response.getFormattedDuration === 'function') {
            return response.getFormattedDuration();
        }
        return response.audioDuration ? Math.round(response.audioDuration) + 's' : '';
    };

    if (!isOpen) return null;

    return (
        <div className="speaking-writing-result-modal-overlay">
            <div className="speaking-writing-result-modal-container">
                {/* Header */}
                <div className="result-modal-header">
                    <div>
                        <h2 className="result-modal-title">
                            {isSpeakingTest() ? 'üé§ K·∫øt qu·∫£ IELTS Speaking' : '‚úçÔ∏è K·∫øt qu·∫£ IELTS Writing'}
                        </h2>
                        {resultData && (
                            <p className="result-modal-subtitle">
                                {resultData.testName}
                            </p>
                        )}
                    </div>
                    <button
                        className="result-modal-close"
                        onClick={onClose}
                    >
                        √ó
                    </button>
                </div>

                {/* Content */}
                <div className="result-modal-content">
                    {loading && (
                        <div className="result-loading">
                            <div className="result-loading-content">
                                <div className="result-spinner"></div>
                                <p className="result-loading-text">ƒêang t·∫£i k·∫øt qu·∫£...</p>
                            </div>
                        </div>
                    )}

                    {error && (
                        <div className="result-error">
                            <div className="result-error-content">
                                <span className="result-error-icon">‚ùå</span>
                                <p className="result-error-text">{error}</p>
                            </div>
                            <button
                                onClick={loadResultData}
                                className="result-error-retry"
                            >
                                Th·ª≠ l·∫°i
                            </button>
                        </div>
                    )}

                    {resultData && (
                        <div className="result-content">
                            {/* Overall Score Section */}
                            <div className="overall-score-section">
                                <h3>üìä ƒêi·ªÉm t·ªïng k·∫øt</h3>
                                <div className="overall-score-display">
                                    <div className="score-circle">
                                        <div
                                            className="score-value"
                                            style={{ color: getScoreColor(resultData.overallScore || 0) }}
                                        >
                                            {formatScore(resultData.overallScore)}
                                        </div>
                                        <div className="score-label">Band Score</div>
                                    </div>

                                    {/* Performance Level Badge */}
                                    {resultData.performanceLevel && (
                                        <div className="performance-badge">
                                            <div
                                                className="badge-icon"
                                                style={{ color: getPerformanceBadge(resultData.performanceLevel).color }}
                                            >
                                                {getPerformanceBadge(resultData.performanceLevel).icon}
                                            </div>
                                            <div className="badge-text">
                                                <div className="badge-level">{resultData.performanceLevel}</div>
                                                <div className="badge-summary">{resultData.performanceSummary}</div>
                                            </div>
                                        </div>
                                    )}

                                    {resultData.overallFeedback && (
                                        <div className="overall-feedback">
                                            <h4>Nh·∫≠n x√©t chung t·ª´ gi√°o vi√™n:</h4>
                                            <div className="feedback-content">
                                                {resultData.overallFeedback}
                                            </div>
                                            {resultData.gradedAt && (
                                                <div className="feedback-timestamp">
                                                    Ch·∫•m ƒëi·ªÉm v√†o: {new Date(resultData.gradedAt).toLocaleString('vi-VN')}
                                                </div>
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* Criteria Scores Section */}
                            {resultData.criteriaScores && Object.keys(resultData.criteriaScores).length > 0 && (
                                <div className="criteria-scores-section">
                                    <h3>üéØ ƒêi·ªÉm theo ti√™u ch√≠</h3>
                                    <div className="criteria-grid">
                                        {getCriteria().map(criterion => {
                                            const score = resultData.criteriaScores[criterion.id];
                                            return (
                                                <div key={criterion.id} className="criterion-card">
                                                    <div className="criterion-header">
                                                        <h4 className="criterion-name">{criterion.name}</h4>
                                                        <div
                                                            className="criterion-score"
                                                            style={{ color: getScoreColor(score || 0) }}
                                                        >
                                                            {formatScore(score)}
                                                        </div>
                                                    </div>
                                                    <p className="criterion-description">{criterion.description}</p>

                                                    {/* Score bar visualization */}
                                                    <div className="score-bar-container">
                                                        <div className="score-bar">
                                                            <div
                                                                className="score-fill"
                                                                style={{
                                                                    width: `${((score || 0) / 9) * 100}%`,
                                                                    backgroundColor: getScoreColor(score || 0)
                                                                }}
                                                            ></div>
                                                        </div>
                                                        <div className="score-labels">
                                                            <span>0</span>
                                                            <span>4.5</span>
                                                            <span>9</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>
                                </div>
                            )}

                            {/* Student Responses Section */}
                            <div className="student-responses-section">
                                <h3>üìù B√†i l√†m c·ªßa b·∫°n</h3>

                                {resultData.responses && resultData.responses.map((response, index) => (
                                    <div key={response.id || index} className="response-review-item">
                                        <div className="response-review-header">
                                            <h4>C√¢u h·ªèi {response.questionNumber || index + 1}</h4>
                                            {response.feedback && (
                                                <div className="response-feedback-indicator">
                                                    <span className="feedback-icon">üí¨</span>
                                                    C√≥ nh·∫≠n x√©t
                                                </div>
                                            )}
                                            {response.manualScore && (
                                                <div className="individual-score-badge">
                                                    <span
                                                        className="score-badge"
                                                        style={{ color: getScoreColor(response.manualScore) }}
                                                    >
                                                        {formatScore(response.manualScore)}
                                                    </span>
                                                </div>
                                            )}
                                        </div>

                                        <div className="response-review-question">
                                            <strong>ƒê·ªÅ b√†i:</strong> {response.questionText}
                                        </div>

                                        <div className="response-review-content">
                                            {/* Audio Response */}
                                            {hasAudioResponse(response) ? (
                                                <div className="student-audio-response">
                                                    <div className="audio-response-header">
                                                        <span className="audio-label">üé§ B√†i n√≥i c·ªßa b·∫°n</span>
                                                        {response.audioDuration && (
                                                            <span className="audio-duration">
                                                                Th·ªùi l∆∞·ª£ng: {getFormattedDuration(response)}
                                                            </span>
                                                        )}
                                                        {response.audioFileSize && (
                                                            <span className="audio-size">
                                                                K√≠ch th∆∞·ªõc: {Math.round(response.audioFileSize / 1024)}KB
                                                            </span>
                                                        )}
                                                    </div>
                                                    <div className="audio-controls">
                                                        {audioPlaying[response.id] === 'loading' ? (
                                                            <button className="audio-btn loading" disabled>
                                                                ‚è≥ ƒêang t·∫£i...
                                                            </button>
                                                        ) : audioPlaying[response.id] ? (
                                                            <div className="audio-playing">
                                                                <button onClick={() => stopAudio(response.id)} className="audio-btn stop">
                                                                    ‚èπÔ∏è D·ª´ng
                                                                </button>
                                                                <button
                                                                    onClick={() => {
                                                                        const audio = audioPlaying[response.id];
                                                                        if (audio && typeof audio.play === 'function') {
                                                                            audio.paused ? audio.play() : audio.pause();
                                                                        }
                                                                    }}
                                                                    className="audio-btn play"
                                                                >
                                                                    {audioPlaying[response.id].paused ? '‚ñ∂Ô∏è Ph√°t' : '‚è∏Ô∏è T·∫°m d·ª´ng'}
                                                                </button>
                                                            </div>
                                                        ) : (
                                                            <button
                                                                onClick={() => playAudio(response.id, response.audioBase64)}
                                                                className="audio-btn play"
                                                            >
                                                                ‚ñ∂Ô∏è Nghe l·∫°i b√†i n√≥i
                                                            </button>
                                                        )}
                                                    </div>
                                                </div>
                                            ) : hasTextResponse(response) ? (
                                                <div className="student-text-response">
                                                    <div className="text-response-header">
                                                        <span className="text-label">‚úçÔ∏è B√†i vi·∫øt c·ªßa b·∫°n</span>
                                                        <div className="word-count">
                                                            S·ªë t·ª´: {getWordCount(response)}
                                                        </div>
                                                    </div>
                                                    <div className="text-content">
                                                        {response.responseText}
                                                    </div>
                                                </div>
                                            ) : (
                                                <div className="no-response">Kh√¥ng c√≥ b√†i l√†m</div>
                                            )}

                                            {/* Individual Feedback */}
                                            {response.feedback && (
                                                <div className="individual-feedback">
                                                    <h5>üí¨ Nh·∫≠n x√©t cho c√¢u n√†y:</h5>
                                                    <div className="feedback-content">
                                                        {response.feedback}
                                                    </div>
                                                    {response.feedbackGivenAt && (
                                                        <div className="feedback-timestamp">
                                                            Nh·∫≠n x√©t v√†o: {new Date(response.feedbackGivenAt).toLocaleString('vi-VN')}
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>

                            {/* Performance Tips Section */}
                            <div className="performance-tips-section">
                                <h3>üí° G·ª£i √Ω c·∫£i thi·ªán</h3>
                                <div className="tips-content">
                                    {isSpeakingTest() ? (
                                        <div className="speaking-tips">
                                            <div className="tip-category">
                                                <h4>üó£Ô∏è Fluency & Coherence</h4>
                                                <ul>
                                                    <li>Luy·ªán t·∫≠p n√≥i li√™n t·ª•c kh√¥ng ng·∫Øt qu√£ng</li>
                                                    <li>S·ª≠ d·ª•ng linking words ƒë·ªÉ n·ªëi c√°c √Ω t∆∞·ªüng</li>
                                                    <li>Tr√°nh l·∫∑p l·∫°i t·ª´ ng·ªØ qu√° nhi·ªÅu</li>
                                                </ul>
                                            </div>
                                            <div className="tip-category">
                                                <h4>üìö Lexical Resource</h4>
                                                <ul>
                                                    <li>M·ªü r·ªông v·ªën t·ª´ v·ª±ng theo ch·ªß ƒë·ªÅ</li>
                                                    <li>S·ª≠ d·ª•ng idioms v√† collocations ph√π h·ª£p</li>
                                                    <li>Tr√°nh l·∫∑p l·∫°i t·ª´ v·ª±ng c∆° b·∫£n</li>
                                                </ul>
                                            </div>
                                            <div className="tip-category">
                                                <h4>üìù Grammar</h4>
                                                <ul>
                                                    <li>S·ª≠ d·ª•ng ƒëa d·∫°ng c·∫•u tr√∫c c√¢u</li>
                                                    <li>Ch√∫ √Ω th√¨ c·ªßa ƒë·ªông t·ª´</li>
                                                    <li>Luy·ªán t·∫≠p c√¢u ph·ª©c v√† c√¢u gh√©p</li>
                                                </ul>
                                            </div>
                                            <div className="tip-category">
                                                <h4>üîä Pronunciation</h4>
                                                <ul>
                                                    <li>Luy·ªán ph√°t √¢m c√°c √¢m kh√≥</li>
                                                    <li>Ch√∫ √Ω tr·ªçng √¢m t·ª´ v√† c√¢u</li>
                                                    <li>Luy·ªán intonation t·ª± nhi√™n</li>
                                                </ul>
                                            </div>
                                        </div>
                                    ) : (
                                        <div className="writing-tips">
                                            <div className="tip-category">
                                                <h4>üéØ Task Achievement</h4>
                                                <ul>
                                                    <li>ƒê·ªçc k·ªπ ƒë·ªÅ b√†i v√† tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß</li>
                                                    <li>ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ v√† ph√π h·ª£p</li>
                                                    <li>ƒê·∫£m b·∫£o ƒë·∫°t ƒë·ªß s·ªë t·ª´ y√™u c·∫ßu</li>
                                                </ul>
                                            </div>
                                            <div className="tip-category">
                                                <h4>üîó Coherence & Cohesion</h4>
                                                <ul>
                                                    <li>S·ª≠ d·ª•ng linking words hi·ªáu qu·∫£</li>
                                                    <li>B·ªë c·ª•c b√†i vi·∫øt r√µ r√†ng, logic</li>
                                                    <li>Li√™n k·∫øt √Ω t∆∞·ªüng gi·ªØa c√°c ƒëo·∫°n</li>
                                                </ul>
                                            </div>
                                            <div className="tip-category">
                                                <h4>üìö Lexical Resource</h4>
                                                <ul>
                                                    <li>S·ª≠ d·ª•ng t·ª´ v·ª±ng ƒëa d·∫°ng v√† ch√≠nh x√°c</li>
                                                    <li>Tr√°nh l·∫∑p t·ª´, s·ª≠ d·ª•ng synonyms</li>
                                                    <li>√Åp d·ª•ng academic vocabulary</li>
                                                </ul>
                                            </div>
                                            <div className="tip-category">
                                                <h4>üìù Grammar</h4>
                                                <ul>
                                                    <li>ƒêa d·∫°ng h√≥a c·∫•u tr√∫c c√¢u</li>
                                                    <li>Ki·ªÉm tra l·ªói ng·ªØ ph√°p c∆° b·∫£n</li>
                                                    <li>S·ª≠ d·ª•ng c√¢u ph·ª©c h·ª£p l√Ω</li>
                                                </ul>
                                            </div>
                                        </div>
                                    )}
                                </div>

                                {/* Next Steps Section */}
                                <div className="next-steps-section">
                                    <h3>üìà B∆∞·ªõc ti·∫øp theo</h3>
                                    <div className="next-steps-content">
                                        <div className="step-item">
                                            <div className="step-icon">üìñ</div>
                                            <div className="step-text">
                                                <strong>Xem l·∫°i feedback:</strong> ƒê·ªçc k·ªπ c√°c nh·∫≠n x√©t c·ªßa gi√°o vi√™n ƒë·ªÉ hi·ªÉu ƒëi·ªÉm m·∫°nh v√† ƒëi·ªÉm y·∫øu
                                            </div>
                                        </div>
                                        <div className="step-item">
                                            <div className="step-icon">üéØ</div>
                                            <div className="step-text">
                                                <strong>Luy·ªán t·∫≠p focused:</strong> T·∫≠p trung v√†o ti√™u ch√≠ c√≥ ƒëi·ªÉm th·∫•p nh·∫•t
                                            </div>
                                        </div>
                                        <div className="step-item">
                                            <div className="step-icon">üìö</div>
                                            <div className="step-text">
                                                <strong>H·ªçc t·ª´ v·ª±ng:</strong> S·ª≠ d·ª•ng flashcards ƒë·ªÉ m·ªü r·ªông v·ªën t·ª´ v·ª±ng
                                            </div>
                                        </div>
                                        <div className="step-item">
                                            <div className="step-icon">üîÑ</div>
                                            <div className="step-text">
                                                <strong>Th·ª±c h√†nh th∆∞·ªùng xuy√™n:</strong> L√†m th√™m c√°c b√†i test t∆∞∆°ng t·ª± ƒë·ªÉ c·∫£i thi·ªán
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>

                {/* Footer */}
                <div className="result-modal-footer">
                    <button
                        className="result-footer-close"
                        onClick={onClose}
                    >
                        ƒê√≥ng
                    </button>

                    {resultData && (
                        <div className="result-footer-actions">
                            <button
                                className="result-footer-action print"
                                onClick={() => window.print()}
                            >
                                üñ®Ô∏è In k·∫øt qu·∫£
                            </button>
                            <button
                                className="result-footer-action share"
                                onClick={() => {
                                    const shareText = `T√¥i v·ª´a ho√†n th√†nh b√†i ${resultData.testName} v·ªõi ƒëi·ªÉm ${formatScore(resultData.overallScore)}! üéâ`;
                                    if (navigator.share) {
                                        navigator.share({
                                            title: 'K·∫øt qu·∫£ IELTS',
                                            text: shareText
                                        });
                                    } else {
                                        navigator.clipboard.writeText(shareText);
                                        alert('ƒê√£ copy k·∫øt qu·∫£ v√†o clipboard!');
                                    }
                                }}
                            >
                                üì§ Chia s·∫ª
                            </button>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

export default SpeakingWritingResultModal;