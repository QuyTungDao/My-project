import React, {useState, useEffect, useRef} from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import Navbar from '../Navbar';
import axios from 'axios';
import './TestDetail.css';
import { getTestDetail, submitTest } from "../../api";
import ListeningTestDisplay from "./ListeningTestDisplay";
import SpeakingTestDisplay from "./SpeakingTestDisplay";
import WritingTestDisplay from "./WritingTestDisplay"; // Th√™m submitTest t·ª´ api

export default function TestDetail() {
    const { id } = useParams();
    const navigate = useNavigate();
    const [test, setTest] = useState(null);
    const [passages, setPassages] = useState([]);
    const [questions, setQuestions] = useState([]);
    const [currentPassageIndex, setCurrentPassageIndex] = useState(0);
    const [userAnswers, setUserAnswers] = useState({});
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [timer, setTimer] = useState(3600); // 60 ph√∫t m·∫∑c ƒë·ªãnh
    const [submitting, setSubmitting] = useState(false);
    const [isLoggedIn, setIsLoggedIn] = useState(false); // State ƒë·ªÉ ki·ªÉm tra ƒëƒÉng nh·∫≠p
    const [highlightContent, setHighlightContent] = useState(false);
    const [markedQuestions, setMarkedQuestions] = useState([]);
    const timerRef = useRef(null);
    const audioRef = useRef(null);
    const [isPlaying, setIsPlaying] = useState(false);
    const [contentHeight, setContentHeight] = useState(50); // Ph·∫ßn trƒÉm chi·ªÅu cao
    const dividerRef = useRef(null);
    const [autoSaveInterval, setAutoSaveInterval] = useState(null);
    const [testType, setTestType] = useState('READING'); // M·∫∑c ƒë·ªãnh READING
    const [audioList, setAudioList] = useState([]); // Danh s√°ch audio cho listening

    useEffect(() => {
        const fetchTestDetail = async () => {
            try {
                setLoading(true);
                console.log("üîÑ ƒêang l·∫•y chi ti·∫øt b√†i thi v·ªõi ID:", id);

                const token = localStorage.getItem('token');
                if (!token) {
                    setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt b√†i thi.");
                    setLoading(false);
                    return;
                }

                const data = await getTestDetail(id);
                console.log("üìã D·ªØ li·ªáu b√†i thi nh·∫≠n ƒë∆∞·ª£c:", data);

                if (data && data.test) {
                    setTest(data.test);
                    setTestType(data.test.testType || 'READING');
                    console.log("‚úÖ Test type:", data.test.testType);

                    if (data.test.durationMinutes) {
                        setTimer(data.test.durationMinutes * 60);
                    }

                    // ‚úÖ ENHANCED: X·ª≠ l√Ω passages cho READING
                    if (data.passages) {
                        console.log("üìñ Reading passages found:", data.passages.length);
                        setPassages(data.passages);
                    }

                    // ‚úÖ ENHANCED: X·ª≠ l√Ω audio cho LISTENING v·ªõi debug chi ti·∫øt
                    // ‚úÖ ENHANCED: X·ª≠ l√Ω audio cho LISTENING v·ªõi debug chi ti·∫øt
                    // ‚úÖ ENHANCED: X·ª≠ l√Ω audio cho LISTENING (REMOVED SPAM LOGS)
                    if (data.audio) {
                        console.log("üéß Processing audio data:", data.audio.length, "files");

                        data.audio.forEach((audio, idx) => {
                            console.log(`Audio ${idx + 1}:`, {
                                id: audio.id,
                                title: audio.title,
                                fileType: audio.fileType,
                                hasBase64: !!(audio.audioBase64 || audio.base64Data),
                                base64Length: (audio.audioBase64 || audio.base64Data)?.length || 0,
                                mimeType: audio.mimeType
                            });
                        });

                        const processedAudio = data.audio.map((audio, index) => ({
                            id: audio.id,
                            title: audio.title || `Section ${index + 1}`,
                            section: audio.section || `SECTION${index + 1}`,
                            fileType: audio.fileType || 'MP3',
                            durationSeconds: audio.durationSeconds || 0,
                            transcript: audio.transcript || '',
                            mimeType: audio.mimeType || 'audio/mpeg',

                            // ‚úÖ CRITICAL: Preserve ALL base64 fields from backend
                            audioBase64: audio.audioBase64,
                            base64Data: audio.base64Data,
                            filePath: audio.filePath,

                            // ‚úÖ Create fileUrl from base64 if available
                            fileUrl: audio.audioBase64 ?
                                `data:${audio.mimeType || 'audio/mpeg'};base64,${audio.audioBase64}` :
                                (audio.base64Data ?
                                        `data:${audio.mimeType || 'audio/mpeg'};base64,${audio.base64Data}` :
                                        audio.filePath
                                )
                        }));

                        console.log("‚úÖ Processed audio list:", processedAudio.length, "files ready");
                        setAudioList(processedAudio);
                    } else {
                        console.log("‚ùå No audio data found in response");
                        setAudioList([]);
                    }

                    // ‚úÖ ENHANCED: X·ª≠ l√Ω questions v·ªõi debug chi ti·∫øt
                    if (data.questions) {
                        console.log("‚ùì Questions found:", data.questions.length);

                        // Debug questions tr∆∞·ªõc khi x·ª≠ l√Ω
                        data.questions.forEach((q, idx) => {
                            console.log(`Question ${idx + 1}:`, {
                                id: q.id,
                                type: q.questionType,
                                text: q.questionText?.substring(0, 50) + '...',
                                audioId: q.audioId,
                                passageId: q.passageId,
                                hasContext: !!(q.context && q.context.trim()),
                                contextLength: q.context?.length || 0,
                                hasInstructions: !!(q.questionSetInstructions && q.questionSetInstructions.trim()),
                                orderInTest: q.orderInTest
                            });
                        });

                        const processedQuestions = data.questions.map((q, index) => {
                            let processedQuestion = {
                                ...q,
                                testId: parseInt(id),
                                // ‚úÖ Normalize field names for component compatibility
                                question_id: q.id,
                                question_text: q.questionText,
                                question_type: q.questionType,
                                audio_id: q.audioId,
                                passage_id: q.passageId,
                                question_set_instructions: q.questionSetInstructions,
                                order_in_test: q.orderInTest,
                                correct_answer: q.correctAnswer || ''
                            };

                            // Parse options n·∫øu l√† chu·ªói JSON
                            if (typeof q.options === 'string' && q.options.startsWith('[')) {
                                try {
                                    processedQuestion.options = JSON.parse(q.options);
                                } catch (e) {
                                    console.error("‚ùå L·ªói khi parse options:", e);
                                }
                            }

                            return processedQuestion;
                        });

                        console.log("‚úÖ Processed questions:", processedQuestions.length);
                        setQuestions(processedQuestions);
                    }

                    setError(null);
                } else {
                    console.error("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†i thi");
                    setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b√†i thi. Vui l√≤ng th·ª≠ l·∫°i sau.");
                }
            } catch (err) {
                console.error("‚ùå L·ªói khi l·∫•y chi ti·∫øt b√†i thi:", err);

                if (err.response && err.response.status === 401) {
                    setError("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                    // ... existing error handling
                } else {
                    setError("Kh√¥ng th·ªÉ t·∫£i b√†i thi. Vui l√≤ng th·ª≠ l·∫°i sau.");
                }
            } finally {
                setLoading(false);
            }
        };

        if (id && isLoggedIn) {
            fetchTestDetail();
        }
    }, [id, navigate, isLoggedIn]);


    // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p khi component mount
    useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            setIsLoggedIn(true);

            // Ki·ªÉm tra xem token c√≥ g·∫ßn h·∫øt h·∫°n kh√¥ng
            try {
                // Gi·∫£i m√£ ph·∫ßn payload c·ªßa JWT token (ph·∫ßn th·ª© 2 sau d·∫•u .)
                const payload = token.split('.')[1];
                const decodedPayload = JSON.parse(atob(payload));
                const expirationTime = decodedPayload.exp * 1000; // Convert to milliseconds
                const currentTime = Date.now();

                // N·∫øu token s·∫Ω h·∫øt h·∫°n trong 10 ph√∫t t·ªõi
                if (expirationTime - currentTime < 10 * 60 * 1000) {
                    console.warn("Token s·∫Ω h·∫øt h·∫°n trong 10 ph√∫t t·ªõi!");
                    // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
                    alert("Phi√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n s·∫Øp h·∫øt h·∫°n. Vui l√≤ng l∆∞u ti·∫øn tr√¨nh v√† ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu.");
                }
            } catch (err) {
                console.error("Kh√¥ng th·ªÉ gi·∫£i m√£ token:", err);
            }
        } else {
            setIsLoggedIn(false);
            setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l√†m b√†i thi.");
        }

        // Ki·ªÉm tra v√† kh√¥i ph·ª•c ti·∫øn tr√¨nh l√†m b√†i
        const savedProgress = localStorage.getItem(`testProgress_${id}`);
        if (savedProgress) {
            try {
                const progress = JSON.parse(savedProgress);
                if (progress.testId === id) {
                    const savedTime = new Date(progress.timestamp);
                    const currentTime = new Date();
                    const diffMinutes = Math.floor((currentTime - savedTime) / (1000 * 60));

                    // Ch·ªâ kh√¥i ph·ª•c n·∫øu ti·∫øn tr√¨nh ƒë∆∞·ª£c l∆∞u trong v√≤ng 1 ng√†y
                    if (diffMinutes < 24 * 60) {
                        const confirmRestore = window.confirm(
                            `Ph√°t hi·ªán ti·∫øn tr√¨nh l√†m b√†i ƒë√£ l∆∞u t·ª´ ${diffMinutes} ph√∫t tr∆∞·ªõc. B·∫°n c√≥ mu·ªën kh√¥i ph·ª•c kh√¥ng?`
                        );

                        if (confirmRestore) {
                            setUserAnswers(progress.answers || {});
                            setMarkedQuestions(progress.markedQuestions || []);
                        }
                    }
                }
            } catch (err) {
                console.error("L·ªói khi kh√¥i ph·ª•c ti·∫øn tr√¨nh:", err);
            }
        }
    }, [id]);

    // Thi·∫øt l·∫≠p auto-save m·ªói 2 ph√∫t
    useEffect(() => {
        if (isLoggedIn && !loading && test) {
            // X√≥a interval c≈© n·∫øu c√≥
            if (autoSaveInterval) {
                clearInterval(autoSaveInterval);
            }

            // Thi·∫øt l·∫≠p interval m·ªõi
            const intervalId = setInterval(() => {
                // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o localStorage
                const progress = {
                    testId: id,
                    answers: userAnswers,
                    markedQuestions: markedQuestions,
                    timestamp: new Date().toISOString()
                };
                localStorage.setItem(`testProgress_${id}`, JSON.stringify(progress));
                console.log('ƒê√£ t·ª± ƒë·ªông l∆∞u ti·∫øn tr√¨nh l√†m b√†i');
            }, 2 * 60 * 1000); // 2 ph√∫t

            setAutoSaveInterval(intervalId);

            // Cleanup khi component unmount
            return () => {
                if (intervalId) {
                    clearInterval(intervalId);
                }
            };
        }
    }, [isLoggedIn, loading, test, id, userAnswers, markedQuestions]);

    useEffect(() => {
        const fetchTestDetail = async () => {
            try {
                setLoading(true);
                console.log("ƒêang l·∫•y chi ti·∫øt b√†i thi v·ªõi ID:", id);

                // Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi l·∫•y chi ti·∫øt b√†i thi
                const token = localStorage.getItem('token');
                if (!token) {
                    setError("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt b√†i thi.");
                    setLoading(false);
                    return;
                }

                // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng ƒë√∫ng h√†m API
                const data = await getTestDetail(id);
                console.log("D·ªØ li·ªáu b√†i thi:", data);

                if (data && data.test) {
                    setTest(data.test);

                    // Thi·∫øt l·∫≠p th·ªùi gian l√†m b√†i t·ª´ d·ªØ li·ªáu b√†i thi
                    if (data.test.durationMinutes) {
                        setTimer(data.test.durationMinutes * 60); // Chuy·ªÉn ph√∫t th√†nh gi√¢y
                    }

                    if (data.passages) {
                        setPassages(data.passages);
                    }

                    if (data.questions) {
                        // X·ª≠ l√Ω options cho m·ªói c√¢u h·ªèi n·∫øu c·∫ßn
                        const processedQuestions = data.questions.map(q => {
                            let processedQuestion = {...q, testId: parseInt(id)};

                            // Parse options n·∫øu l√† chu·ªói JSON
                            if (typeof q.options === 'string' && q.options.startsWith('[')) {
                                try {
                                    processedQuestion.options = JSON.parse(q.options);
                                } catch (e) {
                                    console.error("L·ªói khi parse options:", e);
                                }
                            }

                            return processedQuestion;
                        });

                        setQuestions(processedQuestions);
                    }

                    setError(null);
                } else {
                    console.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†i thi");
                    setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b√†i thi. Vui l√≤ng th·ª≠ l·∫°i sau.");
                }
            } catch (err) {
                console.error("L·ªói khi l·∫•y chi ti·∫øt b√†i thi:", err);

                if (err.response && err.response.status === 401) {
                    setError("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");

                    // L∆∞u l·∫°i ti·∫øn tr√¨nh hi·ªán t·∫°i tr∆∞·ªõc khi chuy·ªÉn trang
                    const progress = {
                        testId: id,
                        answers: userAnswers,
                        markedQuestions: markedQuestions,
                        timestamp: new Date().toISOString()
                    };
                    localStorage.setItem(`testProgress_${id}`, JSON.stringify(progress));

                    // L∆∞u URL hi·ªán t·∫°i ƒë·ªÉ sau khi ƒëƒÉng nh·∫≠p l·∫°i c√≥ th·ªÉ quay l·∫°i
                    localStorage.setItem('redirectAfterLogin', window.location.pathname);

                    setIsLoggedIn(false);
                } else {
                    setError("Kh√¥ng th·ªÉ t·∫£i b√†i thi. Vui l√≤ng th·ª≠ l·∫°i sau.");
                }
            } finally {
                setLoading(false);
            }
        };

        // Ch·ªâ g·ªçi API n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
        if (id && isLoggedIn) {
            fetchTestDetail();
        }
    }, [id, navigate, isLoggedIn]);

    // X·ª≠ l√Ω ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
    useEffect(() => {
        // Ch·ªâ b·∫Øt ƒë·∫ßu ƒë·ªìng h·ªì khi timer ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p v√† kh√¥ng ƒëang loading
        if (timer !== null && !loading && test) {
            // X√≥a b·∫•t k·ª≥ interval ƒëang ch·∫°y
            if (timerRef.current) {
                clearInterval(timerRef.current);
            }

            // Thi·∫øt l·∫≠p interval m·ªõi ƒë·ªÉ ƒë·∫øm ng∆∞·ª£c
            timerRef.current = setInterval(() => {
                setTimer(prevTimer => {
                    // N·∫øu h·∫øt th·ªùi gian
                    if (prevTimer <= 1) {
                        clearInterval(timerRef.current);
                        alert("H·∫øt th·ªùi gian l√†m b√†i! B√†i thi c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c n·ªôp t·ª± ƒë·ªông.");
                        handleSubmit(); // T·ª± ƒë·ªông n·ªôp b√†i
                        return 0;
                    }
                    return prevTimer - 1;
                });
            }, 1000);
        }

        // Cleanup khi component unmount ho·∫∑c dependencies thay ƒë·ªïi
        return () => {
            if (timerRef.current) {
                clearInterval(timerRef.current);
            }
        };
    }, [timer, loading, test]); // Ph·ª• thu·ªôc v√†o timer, loading v√† test

    // Format th·ªùi gian t·ª´ gi√¢y sang mm:ss
    const formatTime = (seconds) => {
        if (seconds === null) return "00:00";

        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
    }

    // Format th·ªùi gian t·ª´ gi√¢y sang mm:ss nh∆∞ trong h√¨nh (59:37)
    const formatTimeLarge = (seconds) => {
        if (seconds === null) return "00:00";

        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn c√¢u tr·∫£ l·ªùi
    const handleAnswerChange = (questionId, answer) => {
        setUserAnswers(prev => ({
            ...prev,
            [questionId]: answer
        }));
    };

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng chuy·ªÉn ƒëo·∫°n vƒÉn
    const handlePassageChange = (passageIndex) => {
        setCurrentPassageIndex(passageIndex);
    };

    const groupQuestionsByTypeAndInstructions = (questions, currentPassage) => {
        const groups = {};

        questions.forEach(question => {
            if (question.passageId === currentPassage?.id) {
                // T·∫°o key d·ª±a tr√™n questionType, passageId v√† instructions
                const key = `${question.questionType}_${question.passageId}_${question.questionSetInstructions || 'default'}`;

                if (!groups[key]) {
                    groups[key] = {
                        questionType: question.questionType,
                        passageId: question.passageId,
                        questions: [],
                        instructions: question.questionSetInstructions || getDefaultInstructionsByQuestionType(question.questionType)
                    };
                }

                groups[key].questions.push(question);
            }
        });

        return Object.values(groups);
    };

// Fallback instructions n·∫øu database ch∆∞a c√≥
    const getDefaultInstructionsByQuestionType = (questionType) => {
        const instructionsMap = {
            'MCQ': 'Choose the correct answer A, B, C or D.',
            'MATCHING': 'Choose the correct headings for each section from the list of headings below.',
            'FILL_IN_THE_BLANK': 'Complete the sentences below. Choose NO MORE THAN TWO WORDS from the passage.',
            'TRUE_FALSE_NOT_GIVEN': 'Do the following statements agree with the information given in the passage?\n\nTRUE if the statement agrees with the information\nFALSE if the statement contradicts the information\nNOT GIVEN if there is no information on this',
            'SHORT_ANSWER': 'Answer the questions below. Choose NO MORE THAN THREE WORDS from the passage.',
            'ESSAY': 'Write an essay of at least 250 words on the following topic.',
            'SPEAKING_TASK': 'Speak about the topic for 2-3 minutes.'
        };

        return instructionsMap[questionType] || 'Answer the following questions based on the passage.';
    };

    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng n·ªôp b√†i
    const handleSubmit = async () => {
        if (submitting) return;

        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi n·ªôp b√†i
        const token = localStorage.getItem('token');
        if (!token) {
            alert('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ n·ªôp b√†i thi.');

            // L∆∞u ti·∫øn tr√¨nh hi·ªán t·∫°i
            handleSaveProgress();

            // L∆∞u URL hi·ªán t·∫°i ƒë·ªÉ sau khi ƒëƒÉng nh·∫≠p l·∫°i c√≥ th·ªÉ quay l·∫°i
            localStorage.setItem('redirectAfterLogin', window.location.pathname);

            navigate('/login');
            return;
        }

        // D·ª´ng ƒë·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c
        if (timerRef.current) {
            clearInterval(timerRef.current);
        }

        setSubmitting(true);
        try {
            // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i
            const responses = Object.keys(userAnswers).map(questionId => ({
                questionId: parseInt(questionId),
                responseText: userAnswers[questionId]
            }));

            console.log("ƒêang n·ªôp b√†i thi v·ªõi ID:", id);
            console.log("S·ªë l∆∞·ª£ng c√¢u tr·∫£ l·ªùi:", responses.length);

            // S·ª≠ d·ª•ng h√†m submitTest t·ª´ api.js thay v√¨ axios tr·ª±c ti·∫øp
            const result = await submitTest(id, responses);
            console.log('K·∫øt qu·∫£ n·ªôp b√†i thi:', result);

            // X√≥a ti·∫øn tr√¨nh ƒë√£ l∆∞u sau khi n·ªôp b√†i th√†nh c√¥ng
            localStorage.removeItem(`testProgress_${id}`);

            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang k·∫øt qu·∫£
            alert('B√†i thi ƒë√£ ƒë∆∞·ª£c n·ªôp th√†nh c√¥ng!');
            navigate(`/test-results/${result.attemptId}`);
        } catch (err) {
            console.error('L·ªói khi n·ªôp b√†i:', err);

            if (err.response) {
                console.error("Status:", err.response.status);
                console.error("Data:", err.response.data);

                if (err.response.status === 401) {
                    alert('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i. Ti·∫øn tr√¨nh l√†m b√†i ƒë√£ ƒë∆∞·ª£c l∆∞u.');

                    // L∆∞u ti·∫øn tr√¨nh l√†m b√†i tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
                    handleSaveProgress();

                    // L∆∞u URL hi·ªán t·∫°i
                    localStorage.setItem('redirectAfterLogin', window.location.pathname);

                    navigate('/login');
                } else {
                    alert(`C√≥ l·ªói x·∫£y ra khi n·ªôp b√†i: ${err.response.data || 'Vui l√≤ng th·ª≠ l·∫°i.'}`);
                }
            } else {
                alert('C√≥ l·ªói x·∫£y ra khi n·ªôp b√†i. Ti·∫øn tr√¨nh l√†m b√†i ƒë√£ ƒë∆∞·ª£c l∆∞u. Vui l√≤ng th·ª≠ l·∫°i.');
                handleSaveProgress();
            }
        } finally {
            setSubmitting(false);
        }
    };

    // X·ª≠ l√Ω ph√°t/d·ª´ng audio
    const toggleAudio = () => {
        if (audioRef.current) {
            if (isPlaying) {
                audioRef.current.pause();
            } else {
                audioRef.current.play();
            }
            setIsPlaying(!isPlaying);
        }
    };

    // X·ª≠ l√Ω ƒë√°nh d·∫•u c√¢u h·ªèi
    const toggleMarkQuestion = (questionId) => {
        setMarkedQuestions(prev => {
            if (prev.includes(questionId)) {
                return prev.filter(id => id !== questionId);
            } else {
                return [...prev, questionId];
            }
        });
    };

    // X·ª≠ l√Ω kh√¥i ph·ª•c/l∆∞u b√†i l√†m
    const handleSaveProgress = () => {
        // L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i v√†o localStorage
        const progress = {
            testId: id,
            answers: userAnswers,
            markedQuestions: markedQuestions,
            timestamp: new Date().toISOString()
        };
        localStorage.setItem(`testProgress_${id}`, JSON.stringify(progress));
        alert('ƒê√£ l∆∞u ti·∫øn tr√¨nh l√†m b√†i th√†nh c√¥ng!');
    };

    // ƒê·ªãnh d·∫°ng n·ªôi dung ƒëo·∫°n vƒÉn v·ªõi c√°c ƒë√°nh d·∫•u ƒëo·∫°n (A, B, C...)
    const formatPassageContent = (content) => {
        if (!content) return null;

        return content.split("\n\n").map((paragraph, index) => {
            // Ph√°t hi·ªán ƒëo·∫°n vƒÉn c√≥ k√Ω t·ª± ƒë√°nh d·∫•u (A, B, C, ...)
            const match = paragraph.match(/^([A-Z])\s(.*)/);
            if (match) {
                return (
                    <p key={index} className={`paragraph ${highlightContent ? 'highlight' : ''}`}>
                        <span className="paragraph-marker">{match[1]}</span> {match[2]}
                    </p>
                );
            }
            return <p key={index} className={`paragraph ${highlightContent ? 'highlight' : ''}`}>{paragraph}</p>;
        });
    };

    // Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn cho c√¢u h·ªèi tr·∫Øc nghi·ªám (MCQ)
    const renderMCQOptions = (question) => {
        if (!question || !question.options) return null;

        let options = question.options;

        // N·∫øu options l√† chu·ªói, th·ª≠ parse n√≥
        if (typeof options === 'string') {
            try {
                options = JSON.parse(options);
            } catch (e) {
                console.error("L·ªói khi parse options:", e);
                return <p>L·ªói hi·ªÉn th·ªã l·ª±a ch·ªçn</p>;
            }
        }

        // N·∫øu options l√† m·∫£ng
        if (Array.isArray(options)) {
            return (
                <div className="mcq-options">
                    {options.map((option, index) => (
                        <div key={index} className="mcq-option">
                            <input
                                type="radio"
                                id={`question-${question.id}-option-${index}`}
                                name={`question-${question.id}`}
                                value={String.fromCharCode(65 + index)} // A, B, C, D
                                checked={userAnswers[question.id] === String.fromCharCode(65 + index)}
                                onChange={() => handleAnswerChange(question.id, String.fromCharCode(65 + index))}
                            />
                            <label htmlFor={`question-${question.id}-option-${index}`}>
                                {String.fromCharCode(65 + index)}. {option}
                            </label>
                        </div>
                    ))}
                </div>
            );
        }

        return <p>ƒê·ªãnh d·∫°ng l·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá</p>;
    };

    // Hi·ªÉn th·ªã UI ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    if (!isLoggedIn) {
        return (
            <div className="test-not-found">
                <Navbar />
                <div className="container mx-auto text-center py-20">
                    <h2 className="text-2xl text-red-600">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l√†m b√†i thi</h2>
                    <p className="mt-2">Ti·∫øn tr√¨nh l√†m b√†i ƒë√£ ƒë∆∞·ª£c l∆∞u v√† s·∫Ω ƒë∆∞·ª£c kh√¥i ph·ª•c sau khi ƒëƒÉng nh·∫≠p l·∫°i</p>
                    <button
                        className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                        onClick={() => navigate('/login')}
                    >
                        ƒêƒÉng nh·∫≠p
                    </button>
                </div>
            </div>
        );
    }

    if (loading) {
        return (
            <div className="test-loading">
                <Navbar />
                <div className="container mx-auto text-center py-20">
                    <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                    <h2 className="text-2xl mt-4">ƒêang t·∫£i b√†i thi...</h2>
                </div>
            </div>
        );
    }

    if (error || !test) {
        return (
            <div className="test-not-found">
                <Navbar />
                <div className="container mx-auto text-center py-20">
                    <h2 className="text-2xl text-red-600">{error || "Kh√¥ng t√¨m th·∫•y b√†i thi"}</h2>
                    <button
                        className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                        onClick={() => navigate('/online-exam')}
                    >
                        Quay l·∫°i danh s√°ch ƒë·ªÅ thi
                    </button>
                </div>
            </div>
        );
    }

    const currentPassage = passages[currentPassageIndex];

    const passageQuestions = questions.filter(q =>
        q.passageId === currentPassage?.id
    );

    // Ph∆∞∆°ng th·ª©c render c√¢u h·ªèi d·ª±a tr√™n lo·∫°i
    const renderQuestionInput = (question) => {
        if (!question) return null;

        switch (question.questionType) {
            case 'MCQ':
                return renderMCQOptions(question);

            case 'FILL_IN_THE_BLANK':
            case 'SHORT_ANSWER':
                return (
                    <input
                        type="text"
                        className="answer-input"
                        value={userAnswers[question.id] || ''}
                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                        placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi..."
                    />
                );

            case 'TRUE_FALSE_NOT_GIVEN':
                return (
                    <div className="true-false-options">
                        {['True', 'False', 'Not Given'].map((option) => (
                            <div key={option} className="true-false-option">
                                <input
                                    type="radio"
                                    id={`question-${question.id}-option-${option}`}
                                    name={`question-${question.id}`}
                                    value={option}
                                    checked={userAnswers[question.id] === option}
                                    onChange={() => handleAnswerChange(question.id, option)}
                                />
                                <label htmlFor={`question-${question.id}-option-${option}`}>
                                    {option}
                                </label>
                            </div>
                        ))}
                    </div>
                );

            case 'MATCHING':
                // Render UI cho c√¢u h·ªèi matching
                let matchingOptions = [];
                try {
                    if (typeof question.options === 'string') {
                        matchingOptions = JSON.parse(question.options);
                    } else if (Array.isArray(question.options)) {
                        matchingOptions = question.options;
                    }
                } catch (e) {
                    console.error("L·ªói khi parse matching options:", e);
                }

                return (
                    <div className="matching-container">
                        <input
                            type="text"
                            className="answer-input"
                            value={userAnswers[question.id] || ''}
                            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                            placeholder="Nh·∫≠p ƒë√°p √°n theo format: A-3,B-1,C-5,..."
                        />
                        <div className="matching-options">
                            <div className="matching-column">
                                {matchingOptions.map((option, index) => (
                                    <div key={`left-${index}`} className="matching-item">
                                        {String.fromCharCode(65 + index)}. {option.left}
                                    </div>
                                ))}
                            </div>
                            <div className="matching-column">
                                {matchingOptions.map((option, index) => (
                                    <div key={`right-${index}`} className="matching-item">
                                        {index + 1}. {option.right}
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                );

            case 'ESSAY':
                return (
                    <textarea
                        className="essay-input"
                        value={userAnswers[question.id] || ''}
                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                        placeholder="Nh·∫≠p b√†i lu·∫≠n c·ªßa b·∫°n..."
                        rows={6}
                    />
                );

            default:
                return (
                    <input
                        type="text"
                        className="answer-input"
                        value={userAnswers[question.id] || ''}
                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                        placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi..."
                    />
                );
        }
    };

    const handleMouseDown = (e) => {
        e.preventDefault();
        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
    };

    const handleMouseMove = (e) => {
        const container = document.querySelector('.unified-content-container');
        if (!container) return;

        const containerRect = container.getBoundingClientRect();
        const containerWidth = containerRect.width;
        const mouseX = e.clientX - containerRect.left;

        // Calculate percentage (between 20% and 80%)
        const contentWidth = Math.min(Math.max((mouseX / containerWidth) * 100, 20), 80);

        // Apply widths
        const contentSection = document.querySelector('.content-section');
        const questionsSection = document.querySelector('.questions-section');

        if (contentSection && questionsSection) {
            contentSection.style.width = `${contentWidth}%`;
            questionsSection.style.width = `${100 - contentWidth - 1}%`; // 1% for divider
        }
    };

    const handleMouseUp = () => {
        document.removeEventListener('mousemove', handleMouseMove);
        document.removeEventListener('mouseup', handleMouseUp);
    };

    return (
        <div className="test-detail-page">
            <Navbar />

            {/* Loading state */}
            {loading && (
                <div className="test-loading">
                    <div className="container mx-auto text-center py-20">
                        <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                        <h2 className="text-2xl mt-4">ƒêang t·∫£i b√†i thi...</h2>
                    </div>
                </div>
            )}

            {/* Not logged in */}
            {!isLoggedIn && (
                <div className="test-not-found">
                    <div className="container mx-auto text-center py-20">
                        <h2 className="text-2xl text-red-600">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l√†m b√†i thi</h2>
                        <p className="mt-2">Ti·∫øn tr√¨nh l√†m b√†i ƒë√£ ƒë∆∞·ª£c l∆∞u v√† s·∫Ω ƒë∆∞·ª£c kh√¥i ph·ª•c sau khi ƒëƒÉng nh·∫≠p l·∫°i</p>
                        <button
                            className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                            onClick={() => navigate('/login')}
                        >
                            ƒêƒÉng nh·∫≠p
                        </button>
                    </div>
                </div>
            )}

            {/* Error state */}
            {(error || !test) && !loading && (
                <div className="test-not-found">
                    <div className="container mx-auto text-center py-20">
                        <h2 className="text-2xl text-red-600">{error || "Kh√¥ng t√¨m th·∫•y b√†i thi"}</h2>
                        <button
                            className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                            onClick={() => navigate('/online-exam')}
                        >
                            Quay l·∫°i danh s√°ch ƒë·ªÅ thi
                        </button>
                    </div>
                </div>
            )}

            {/* ‚úÖ LISTENING TEST - S·ª≠ d·ª•ng component m·ªõi */}
            {!loading && !error && test && testType === 'LISTENING' && (
                <ListeningTestDisplay
                    test={test}
                    audioList={audioList}
                    questions={questions}
                    userAnswers={userAnswers}
                    onAnswerChange={handleAnswerChange}
                    isSubmitted={submitting}
                    timer={timer}
                    onSubmit={handleSubmit}
                    submitting={submitting}
                />
            )}

            {/* ‚úÖ READING TEST - Gi·ªØ nguy√™n giao di·ªán c≈© */}
            {!loading && !error && test && testType === 'READING' && (
                <div className="main-content">
                    <div className="test-main-container">
                        <h1 className="test-title">{test.testName}</h1>

                        <div className="top-timer-mobile">
                            <div className="timer-label">Th·ªùi gian c√≤n l·∫°i:</div>
                            <div className="timer-value">{formatTimeLarge(timer)}</div>
                        </div>

                        <div className="highlight-toggle-container">
                            <label className="switch">
                                <input
                                    type="checkbox"
                                    checked={highlightContent}
                                    onChange={() => setHighlightContent(!highlightContent)}
                                />
                                <span className="slider round"></span>
                            </label>
                            <span className="highlight-label">Highlight n·ªôi dung</span>
                            <span className="info-icon" title="L√†m n·ªïi b·∫≠t n·ªôi dung vƒÉn b·∫£n ƒë·ªÉ d·ªÖ theo d√µi">‚ìò</span>
                        </div>

                        <div className="recording-tabs">
                            {passages.map((passage, index) => (
                                <button
                                    key={passage.id}
                                    className={`recording-tab ${currentPassageIndex === index ? 'active' : ''}`}
                                    onClick={() => handlePassageChange(index)}
                                >
                                    {passage.title || `ƒêo·∫°n vƒÉn ${index + 1}`}
                                </button>
                            ))}
                        </div>

                        <div className="unified-content-container">
                            <div className="content-section">
                                <h2 className="section-title">{currentPassage?.title || test.testName}</h2>
                                {formatPassageContent(currentPassage?.content || '')}
                            </div>

                            <div className="section-divider"
                                 ref={dividerRef}
                                 onMouseDown={handleMouseDown}></div>

                            <div className="questions-section">
                                <h2 className="section-title">Questions</h2>

                                {groupQuestionsByTypeAndInstructions(questions, currentPassage).map((group, groupIndex) => (
                                    <div key={`group-${groupIndex}`} className="question-group">
                                        <div className="question-type-header">
                                            <h3>{group.questionType.replace(/_/g, ' ')}</h3>
                                            <span className="question-count">
                                            Questions {group.questions[0]?.orderInTest} - {group.questions[group.questions.length - 1]?.orderInTest}
                                        </span>
                                        </div>

                                        {group.instructions && (
                                            <div className="instructions">
                                                <p>{group.instructions}</p>
                                            </div>
                                        )}

                                        <div className="questions-list">
                                            {group.questions
                                                .sort((a, b) => a.orderInTest - b.orderInTest)
                                                .map((question, index) => (
                                                    <div key={question.id} className="question-item">
                                                        <div
                                                            className={`question-number ${markedQuestions.includes(question.id) ? 'marked' : ''}`}
                                                            onClick={() => toggleMarkQuestion(question.id)}
                                                            data-order-in-test={question.orderInTest}>
                                                            {question.orderInTest}
                                                        </div>
                                                        <div className="question-content">
                                                            <p className="question-text">{question.questionText}</p>
                                                            {renderQuestionInput(question)}
                                                        </div>
                                                    </div>
                                                ))}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>

                    <div className="test-sidebar">
                        <div className="sidebar-timer">
                            <h3>Th·ªùi gian c√≤n l·∫°i:</h3>
                            <div className="time-display">{formatTimeLarge(timer)}</div>
                        </div>

                        <button className="submit-button" onClick={handleSubmit} disabled={submitting}>
                            {submitting ? 'ƒêANG N·ªòP...' : 'N·ªòP B√ÄI'}
                        </button>

                        <div className="save-progress" onClick={handleSaveProgress}>
                            <span className="save-icon">‚Ü©</span> Kh√¥i ph·ª•c/l∆∞u b√†i l√†m
                        </div>

                        <div className="review-note">
                            <strong>Ch√∫ √Ω:</strong> b·∫°n c√≥ th·ªÉ click v√†o s·ªë th·ª© t·ª± c√¢u h·ªèi trong b√†i ƒë·ªÉ ƒë√°nh d·∫•u review
                        </div>

                        {passages.map((passage, index) => {
                            const recordingQuestions = questions.filter(q =>
                                q.passageId === passage.id
                            );

                            return (
                                <div key={passage.id} className="recording-questions">
                                    <h3>{passage.title || `ƒêo·∫°n vƒÉn ${index + 1}`}</h3>
                                    <div className="question-buttons">
                                        {recordingQuestions.map(question => (
                                            <button
                                                key={question.id}
                                                className={`question-button ${markedQuestions.includes(question.id) ? 'marked' : ''} ${userAnswers[question.id] ? 'answered' : ''}`}
                                                onClick={() => {
                                                    setCurrentPassageIndex(index);
                                                    setTimeout(() => {
                                                        const questionElement = document.querySelector(`.question-number[data-order-in-test="${question.orderInTest}"]`);
                                                        if (questionElement) {
                                                            questionElement.scrollIntoView({ behavior: 'smooth' });
                                                        }
                                                    }, 100);
                                                }}
                                            >
                                                {question.orderInTest}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            )}

            {!loading && !error && test && testType === 'WRITING' && (
                <WritingTestDisplay
                    test={test}
                    questions={questions}
                    userAnswers={userAnswers}
                    onAnswerChange={handleAnswerChange}
                    isSubmitted={submitting}
                    timer={timer}
                    onSubmit={handleSubmit}
                    submitting={submitting}
                />
            )}

            {/* ‚úÖ SPEAKING TEST - Component m·ªõi */}
            {!loading && !error && test && testType === 'SPEAKING' && (
                <SpeakingTestDisplay
                    test={test}
                    questions={questions}
                    userAnswers={userAnswers}
                    onAnswerChange={handleAnswerChange}
                    isSubmitted={submitting}
                    timer={timer}
                    onSubmit={handleSubmit}
                    submitting={submitting}
                />
            )}

            {/* ‚úÖ OTHER TEST TYPES - C√≥ th·ªÉ th√™m sau */}
            {!loading && !error && test && !['LISTENING', 'READING', 'WRITING', 'SPEAKING'].includes(testType) && (
                <div className="unsupported-test-type">
                    <div className="container mx-auto text-center py-20">
                        <h2 className="text-2xl text-gray-600">Lo·∫°i b√†i thi "{testType}" ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£</h2>
                        <p className="mt-2">Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
                        <button
                            className="mt-4 bg-blue-500 text-white px-4 py-2 rounded"
                            onClick={() => navigate('/online-exam')}
                        >
                            Quay l·∫°i danh s√°ch ƒë·ªÅ thi
                        </button>
                    </div>
                </div>
            )}

            {/* Token expiry warning - gi·ªØ nguy√™n */}
            <div id="token-expiry-warning" className="token-warning" style={{display: 'none'}}>
                <div className="token-warning-content">
                    <h3>C·∫£nh b√°o: Phi√™n l√†m b√†i s·∫Øp h·∫øt h·∫°n</h3>
                    <p>Phi√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n trong √≠t ph√∫t t·ªõi. Vui l√≤ng l∆∞u ti·∫øn tr√¨nh l√†m b√†i v√† ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu.</p>
                    <div className="token-warning-actions">
                        <button onClick={handleSaveProgress}>L∆∞u ti·∫øn tr√¨nh</button>
                        <button onClick={() => {
                            handleSaveProgress();
                            navigate('/login');
                        }}>ƒêƒÉng nh·∫≠p l·∫°i</button>
                        <button onClick={() => document.getElementById('token-expiry-warning').style.display = 'none'}>ƒê√≥ng</button>
                    </div>
                </div>
            </div>

            {/* Hidden Audio element - gi·ªØ nguy√™n */}
            <audio ref={audioRef} src={null} className="hidden"/>
        </div>
    );
}